@page "/patients"
@using API.Shared
@using API.Shared.Models
@inject HttpClient Http

<h1>Patients</h1>

<hr />

<table width="100%" style="background: #447778; color: honeydew">
    <tr>
        <td width="20"> </td>
        <td>
            <h2> Add New Patient Details</h2>
        </td>
        <td> </td>
        <td align="right">
            <button class="btn btn-info" style="background: #76b1b3;" @onclick="ResetFields">Reset</button>
        </td>
        <td width="10"> </td>
    </tr>
    <tr>
        <td colspan="2"></td>
    </tr>
</table>

<hr />

<RadzenCard>
    <EditForm Model="@patient">
        <DataAnnotationsValidator />
        <table class="form-group">
            <tr>
                <td>
                    <label for="Name" class="control-label">NIN<span style="color: red">*</span></label>
                </td>

                <td>
                    <InputNumber class="form-control" @bind-Value="patient.PnationalIdentificationNumber" />
                    <ValidationMessage For="@(()=>patient.PnationalIdentificationNumber)" />
                </td>

                <td width="20"> </td>

                <td>
                    <label for="Name" class="control-label">Phone Number</label>
                </td>

                <td>
                    <InputNumber class="form-control" @bind-Value="patient.PphoneNumber" />
                </td>
            </tr>

            <tr>
                <td>
                    <label for="Name" class="control-label">First Name<span style="color: red">*</span></label>
                </td>

                <td>
                    <InputText class="form-control" @bind-Value="patient.PfirstName" />
                    <ValidationMessage For="@(()=>patient.PfirstName)" />
                </td>

                <td width="20"> </td>

                <td>
                    <label for="Name" class="control-label">Last Name<span style="color: red">*</span></label>
                </td>

                <td>
                    <InputText class="form-control" @bind-Value="patient.PlastName" />
                    <ValidationMessage For="@(()=>patient.PlastName)" />
                </td>
            </tr>

            <tr>
                <td>
                    <label for="Name" class="control-label">Entry Date<span style="color: red">*</span></label>
                </td>

                <td>
                    <InputDate @bind-Value="patient.PentryDate" @bind-Value:format="dd/MM/yyyy" />
                    <ValidationMessage For="@(()=>patient.PentryDate)" />
                </td>

                <td width="20"> </td>

                <td>
                    <label for="Name" class="control-label">Birthdate<span style="color: red">*</span></label>
                </td>

                <td>
                    <InputDate @bind-Value="patient.PbirthDate" @bind-Value:format="dd/MM/yyyy" />
                    <ValidationMessage For="@(()=>patient.PbirthDate)" />
                </td>
            </tr>

            <tr>
                <td>
                    <label for="Name" class="control-label">City</label>
                </td>

                <td>
                    <InputText class="form-control" @bind-Value="patient.Pcity" />
                </td>

                <td width="20"> </td>

                <td>
                    <label for="Name" class="control-label">Number</label>
                </td>

                <td>
                    <InputNumber class="form-control" @bind-Value="patient.Pnumber" />
                </td>
            </tr>

            <tr>
                <td>
                    <label for="Name" class="control-label">Street</label>
                </td>

                <td>
                    <InputText class="form-control" @bind-Value="patient.Pstreet" />
                </td>

                <td width="20"> </td>

                <td>
                    <label for="Name" class="control-label">Postcode</label>
                </td>

                <td>
                    <InputText class="form-control" @bind-Value="patient.PpostCode" />
                </td>
            </tr>

            <tr>
                <td>
                    <label for="Name" class="control-label">Doctor ID</label>
                </td>

                <td>
                    <InputNumber class="form-control" @bind-Value="patient.WorkerId" />
                </td>

                <td width="20"> </td>

                <td>
                    <label for="Name" class="control-label">Room ID</label>
                </td>

                <td>
                    <InputText class="form-control" @bind-Value="patient.RoomId" />
                </td>
            </tr>

            <tr height=5px></tr>
            <tr>
                <td></td>
                <td>
                    <button type="submit" class="btn btn-success" @onclick="(() => AddPatient())" style="width: 220px; background: #4e8a58;">Save</button>
                </td>
            </tr>

        </table>
    </EditForm>
</RadzenCard>

<hr/>

<table width="100%" style="background: #447778; color: honeydew">
    <tr>
        <td width="20"> </td>
        <td>
            <h2>Patients Details</h2>
        </td>

    </tr>
    <tr>
        <td colspan="2"></td>
    </tr>
</table>

@if (patients_array == null)
{
    <p><em>Loading...</em></p>
}

else
{
    <RadzenGrid Responsive="true" AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced" AllowColumnResize="true"
                AllowPaging="true" PageSize="4" AllowSorting="true" Data="patients_array" TItem="Patient" Style="width: auto">
        <Columns>
            <RadzenGridColumn TItem="Patient" Property="PnationalIdentificationNumber" Title="NIN" />
            <RadzenGridColumn TItem="Patient" Property="PphoneNumber" Title="Phone Number" />
            <RadzenGridColumn TItem="Patient" Property="PfirstName" Title="First Name" />
            <RadzenGridColumn TItem="Patient" Property="PlastName" Title="Last Name" />
            <RadzenGridColumn TItem="Patient" Property="PentryDate" Title="Entry Date" FormatString="{0:dd/MM/yyyy}" />
            <RadzenGridColumn TItem="Patient" Property="PbirthDate" Title="Birthdate" FormatString="{0:dd/MM/yyyy}" />
            <RadzenGridColumn TItem="Patient" Property="Pcity" Title="City" />
            <RadzenGridColumn TItem="Patient" Property="Pnumber" Title="Number" />
            <RadzenGridColumn TItem="Patient" Property="Pstreet" Title="Street" />
            <RadzenGridColumn TItem="Patient" Property="PpostCode" Title="Postcode" />
            <RadzenGridColumn TItem="Patient" Property="WorkerId" Title="Doctor ID" />
            <RadzenGridColumn TItem="Patient" Property="RoomId" Title="Room ID" />

            <RadzenGridColumn TItem="Patient" Title="Edit">
                <Template Context="p">
                    <RadzenButton Click=@(() => EditPatient(p.PnationalIdentificationNumber)) Text="Edit" ButtonStyle="ButtonStyle.Warning" Style="margin-bottom: 5px;" />
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="Patient" Title="Delete">
                <Template Context="p">
                    <RadzenButton Click=@(() => DeletePatient(p.PnationalIdentificationNumber)) Text="Delete" ButtonStyle="ButtonStyle.Danger" Style="margin-bottom: 5px;" />
                </Template>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>
}

@code
{
    private Patient[] patients_array;
    Patient patient = new Patient();
    bool it_is_going_to_update = false;

    protected override async Task OnInitializedAsync()
    {
        patients_array = await Http.GetFromJsonAsync<Patient[]>("api/Patients");
    }

    void ResetFields()
    {
        patient = new Patient();
        it_is_going_to_update = false;
    }

    protected async Task AddPatient()
    {
        if(it_is_going_to_update == false)
            await Http.PostAsJsonAsync("api/Patients", patient);
        else
            await Http.PutAsJsonAsync("api/Patients/"+ patient.PnationalIdentificationNumber.ToString(), patient);

        ResetFields();
        patients_array = await Http.GetFromJsonAsync<Patient[]>("api/Patients");
        it_is_going_to_update = false;
    }

    protected async Task EditPatient(long nationalIdentificationNumber)
    {
        patient = await Http.GetFromJsonAsync<Patient>("api/Patients/" + Convert.ToInt64(nationalIdentificationNumber));
        it_is_going_to_update = true;
    }

    protected async Task DeletePatient(long nationalIdentificationNumber)
    {
        await Http.DeleteAsync("api/Patients/" + Convert.ToInt64(nationalIdentificationNumber));
        patients_array = await Http.GetFromJsonAsync<Patient[]>("api/Patients");
        it_is_going_to_update = false;
    }
}
