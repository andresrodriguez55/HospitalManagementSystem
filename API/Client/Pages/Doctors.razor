@page "/doctors"
@using API.Shared
@using API.Shared.Models
@inject HttpClient Http

<h1>Doctors</h1>

<hr />

<table width="100%" style="background: #447778; color: honeydew">
    <tr>
        <td width="20"> </td>
        <td>
            <h2> Add New Doctor Details</h2>
        </td>
        <td> </td>
        <td align="right">
            <button class="btn btn-info" style="background: #76b1b3;" @onclick="ResetFields">Reset</button>
        </td>
        <td width="10"> </td>
    </tr>
    <tr>
        <td colspan="2"></td>
    </tr>
</table>

<hr />

<RadzenCard>
    <EditForm Model="@doctor">
        <DataAnnotationsValidator />
        <table class="form-group">
            <tr>
                <td>
                    <label for="Name" class="control-label">Worker ID<span style="color: red">*</span></label>
                </td>

                <td>
                    <InputNumber class="form-control" @bind-Value="doctor.WorkerId" />
                    <ValidationMessage For="@(()=>doctor.WorkerId)" />
                </td>

                <td width="20"> </td>

                <td>
                    <label for="Name" class="control-label">Specialization<span style="color: red">*</span></label>
                </td>

                <td>
                    <InputText class="form-control" @bind-Value="doctor.Dspecialization" />
                    <ValidationMessage For="@(()=>doctor.Dspecialization)" />
                </td>
            </tr>

            <tr height=5px></tr>
            <tr>
                <td></td>
                <td>
                    <button type="submit" class="btn btn-success" @onclick="(() => AddDoctor())" style="width: 220px; background: #4e8a58;">Save</button>
                </td>
            </tr>
        </table>
    </EditForm>
</RadzenCard>

<hr/>

<table width="100%" style="background: #447778; color: honeydew">
    <tr>
        <td width="20"> </td>
        <td>
            <h2>Doctors Details</h2>
        </td>

    </tr>
    <tr>
        <td colspan="2"></td>
    </tr>
</table>

@if (doctors_array == null)
{
    <p><em>Loading...</em></p>
}

else
{
    <RadzenGrid AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" FilterMode="FilterMode.Advanced"
                AllowPaging="true" PageSize="4" AllowSorting="true" Data="doctors_array" TItem="Doctor" Style="width: auto">
        <Columns>
            <RadzenGridColumn TItem="Doctor" Property="WorkerId" Title="ID" />
            <RadzenGridColumn TItem="Doctor" Property="Dspecialization" Title="Specialization" />
            <RadzenGridColumn TItem="Doctor" Title="Edit">
                <Template Context="d">
                    <RadzenButton Click=@(() => EditDoctor(d.WorkerId)) Text="Edit" ButtonStyle="ButtonStyle.Warning" Style="margin-bottom: 20px; width: 150px" />
                </Template>
            </RadzenGridColumn>
            <RadzenGridColumn TItem="Doctor" Title="Delete">
                <Template Context="d">
                    <RadzenButton Click=@(() => DeleteDoctor(d.WorkerId)) Text="Delete" ButtonStyle="ButtonStyle.Danger" Style="margin-bottom: 20px; width: 150px" />
                </Template>
            </RadzenGridColumn>
        </Columns>
    </RadzenGrid>
}

@code
{
    private Doctor[] doctors_array;
    Doctor doctor = new Doctor();
    bool it_is_going_to_update = false;

    protected override async Task OnInitializedAsync()
    {
        doctors_array = await Http.GetFromJsonAsync<Doctor[]>("api/Doctors");
    }

    void ResetFields()
    {
        doctor = new Doctor();
        it_is_going_to_update = false;
    }

    protected async Task AddDoctor()
    {
        if (it_is_going_to_update == false)
            await Http.PostAsJsonAsync("api/Doctors", doctor);

        else
            await Http.PutAsJsonAsync("api/Doctors/" + doctor.WorkerId.ToString(), doctor);

        ResetFields();
        doctors_array = await Http.GetFromJsonAsync<Doctor[]>("api/Doctors");
        it_is_going_to_update = false;
    }

    protected async Task EditDoctor(int workerID)
    {
        doctor = await Http.GetFromJsonAsync<Doctor>("api/Doctors/" + Convert.ToInt16(workerID));
        it_is_going_to_update = true;
    }

    protected async Task DeleteDoctor(int workerID)
    {
        await Http.DeleteAsync("api/Doctors/" + Convert.ToInt16(workerID));
        doctors_array = await Http.GetFromJsonAsync<Doctor[]>("api/Doctors");
        it_is_going_to_update = false;
    }
}
